<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionsExplanation.Text" xml:space="preserve">
    <value>The action binding conventions in Caliburn.Micro should be working as expected, the biggest change has been to use a third party library Windows.UI.Interactivity to replace the System.Windows.Interactivity framework available in other xaml platforms. Therefore there will may be some issues to resolve.

One of the other changes is that when parameters are resolved. Windows 8 is missing UpdateSourceTrigger or GetBindingExpression. So resolution of guard properties will not be responsive as other platforms.

To the right is a number of samples, the first is a method bound to action through the Name of the button. The second uses the Message.Attach property passing through a named parameter. The third uses the full syntax to wire a method to the DoubleTapped event to a method call.

Buttons in the AppBar work like another other button (unlike Windows Phone) and all standard conventions should apply.
</value>
  </data>
  <data name="BindingsExplanation.Text" xml:space="preserve">
    <value>The property binding conventions in Caliburn.Micro should be working as expected, there have been no changes in this area. Though some work may still be necessary to add default conventions for some of the new controls.

To the right is a sample of a ListBox named "Developers" by convention being bound to the collection Developers and the SelectedDeveloper property,  notice the changes in pluralisation.

Because we haven't specified an ItemTemplate for the ListBox Caliburn.Micro uses it's conventions to locate the user control DeveloperView for each list item.

Below the ListBox is a TextBlock bound to the SelectedDeveloper using the name "SelectedDeveloper_Name".

Controls in the AppBar work be bound like any other other control (unlike Windows Phone) and all standard conventions should apply.</value>
  </data>
  <data name="CoroutinesExplanation.Text" xml:space="preserve">
    <value>Thanks to the introduction of async / await into WinRT apps the use of coroutines to provide functionality around asynchronous methods will most likely be limited. However Caliburn.Micro IResult's do have one extra feature in that they provide access to the "ActionExectutionContext", this provides access to the View in a more controlled manner and means any view interaction code can be seperate from  the View Model.

Using these coroutines doesn't preclude you from using the async await keywords as the Execute method on a custom IResult can be an async method. The DelayResult class shows a good example of this.

The button to the left executes a coroutine that returns four results, the first changes the views visual state, the second causes an artificial delay. The third then changes the visual state and the four shows a message dialog.</value>
  </data>
  <data name="ExecuteExplanation.Text" xml:space="preserve">
    <value>Caliburn Micro has always had mechanisms for marshalling code back to the UI thread through the method "Execute.OnUIThread", this hasn't changed. This method is used in the binding base classes PropertyChangedBase and BindableCollection in order to make sure all property changed notifications.

Note that in initial versions of the WinRT port this method was asynchronous (the method would return before the code was excuted). From this sample the method is synchronous, in order to better control the flow of execution.

The sample to the right side steps all binding and directly updates the view from a background thread. Removing the call to Execute.OnUIThread causes the application to crash.</value>
  </data>
  <data name="SetupExplanation.Text" xml:space="preserve">
    <value>Unlike other versions of Caliburn Micro the WinRT version doesn't use a Bootstrapper, the non ranty reason for this is that Windows.UI.Xaml.Application exposes most of it's functionality through method overrides and not events. Therefore it makes sense to have a custom Application rather than forcing the developer to wire the application to the bootstrapper.

The functionality of this new CaliburnApplication is very similar to the previous Bootstrapper. Do expect some breaking changes regarding the functionality of handling the default view, launch arguments and types.

Check out App.xaml and App.xaml.cs for what's required in setting up Caliburn.Micro in WinRT.</value>
  </data>
</root>